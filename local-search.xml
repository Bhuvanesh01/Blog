<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>CloudSek Jan Challenge Writeup</title>
    <link href="/Blog/2021/01/23/CloudSek-Jan-Challenge-writeup/"/>
    <url>/Blog/2021/01/23/CloudSek-Jan-Challenge-writeup/</url>
    
    <content type="html"><![CDATA[<p>Here is how I solved the CTF Challenge for the month of january from CloudSek.</p><h2 id="CHALLENGE"><a href="#CHALLENGE" class="headerlink" title="CHALLENGE"></a>CHALLENGE</h2><p>The challenge starts with the <a href="http://54.212.122.94:8080/">LINK</a> to a website which contains a contact form.</p><p><img src="CloudSek_CTF_JAN_1.png"> </p><p>On submitting the form we get the message that it is submitted succesfully.</p><p><img src="CloudSek_CTF_JAN_1-2.png"> </p><p>Since there is nothing interesting other than the form on the page lets check the source of the website. The Source of the page contains javascript executing xml.</p><p><img src="CloudSek_CTF_JAN_2.png"></p><p>Now i thought since it is executing xml lets try XXE on this. So i searched for a simplest XXE Payload which can read files. After searching on google for a few min i found this payload.</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs PHP"><span class="hljs-meta">&lt;?</span>xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;ISO-8859-1&quot;</span><span class="hljs-meta">?&gt;</span><br>&lt;!DOCTYPE foo [ &lt;!ELEMENT foo ANY &gt;<br>&lt;!ENTITY xxe SYSTEM <span class="hljs-string">&quot;file:///etc/passwd&quot;</span> &gt;]&gt;<br>&lt;input&gt;<br>    &lt;firstName&gt;&amp;xxe;&lt;/firstName&gt;<br>    &lt;lastName&gt;surname&lt;/lastName&gt;<br>&lt;/input&gt;<br></code></pre></div></td></tr></table></figure><p>Lets fire up Burp Suite and capture a POST request so that we can test our payload. On using the payload on the captured POST request we got a successful response and we also got a username which we can make use of.</p><p><img src="CloudSek_CTF_JAN_3.png"></p><p>Now lets Modify our Payload to find the FLAG.</p><p><img src="CloudSek_CTF_JAN_4.png"></p><blockquote><p> <strong>FLAG</strong>: CLOUDSEKCTF{XxE_Is_5UN}</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Hacking</category>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF Writeups</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CloudSek CTF Writeup</title>
    <link href="/Blog/2020/12/05/CloudSek-CTF-Dec-Writeup/"/>
    <url>/Blog/2020/12/05/CloudSek-CTF-Dec-Writeup/</url>
    
    <content type="html"><![CDATA[<p>Here is how I solved the CTF Challenge from CloudSek. I managed to finsih in the top 10 even though i took 3 hrs to solve this. I learned about PHP Type Juggling from this challenge.</p><h2 id="CHALLENGE"><a href="#CHALLENGE" class="headerlink" title="CHALLENGE"></a>CHALLENGE</h2><p>The challenge starts with the <a href="54.149.247.108">LINK</a> to a website which looks like this:</p><p><img src="CloudSek_CTF_Home.png"> </p><p>Since there is nothing interesting on the page, let’s start haxoring! The first thing to check is for the robots.txt and luckily we got some juicy info.</p><p><img src="CloudSek_CTF_Robots.png"></p><p>On visiting xvigil.php got php script which is taking two inputs hash and xvigil</p><p><img src="CloudSek_CTF_Xvigil.png"></p><p>Lets check getSecret.php out. We got another php script this script is taking two inputs Cl0ud and SEK and then converting the values of these two to md5 and then checking if the md5 values of two variable is equal. If the values are then it will print out the secret.</p><p><img src="CloudSek_CTF_Getsecret.png"></p><p>Now how can two different values have same md5 hash? So I fired up google and searched how can i make two md5 hash equal in php and i found this blog post about [PHP Type Juggling] (<a href="https://www.netsparker.com/blog/web-security/php-type-juggling-vulnerabilities/">https://www.netsparker.com/blog/web-security/php-type-juggling-vulnerabilities/</a>). After reading this post i got to know that there is a vulnerability in php that allows it to evaluate two values of different data types to true if there hash is in the scientific E-notation format. So Passed the values ‘240610708 and ‘QNKCDZO’ to the two variables.<br>We got the secret thanks to php type juggling.</p><p><img src="CloudSek_CTF_Getsecret2.png"></p><p>Now we have to pass the md5 hash of secret and the string in xvigil variable as the value of hash variable in xvigil.php script. For eg: I passed Xvigil = ctf and Hash = 3fb855e61ae87fd72739c50b5dcbd323. Here value of Xvigil can be anything bt the value of hash will be md5 hash of ‘value in Xvigil + Secret’.</p><p><img src="CloudSek_CTF_Hash.png"></p><p>And on doing the above action the php script evaluates to true and we got our flag and the link to google form where we have to submit the flag.</p><p><img src="CloudSek_CTF_Flag.png"></p><blockquote><p> <strong>FLAG</strong>: Cl0uDsEK_cTf{PhP_i$_kInDa_fUnNYy}</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Hacking</category>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF Writeups</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>A Simple Guide to Setup ADB</title>
    <link href="/Blog/2020/11/21/ADB-Installation-Guide/"/>
    <url>/Blog/2020/11/21/ADB-Installation-Guide/</url>
    
    <content type="html"><![CDATA[<h1 id="A-Simple-Guide-to-Setup-Android-Debug-Bridge-ADB"><a href="#A-Simple-Guide-to-Setup-Android-Debug-Bridge-ADB" class="headerlink" title="A Simple Guide to Setup Android Debug Bridge (ADB)"></a>A Simple Guide to Setup Android Debug Bridge (ADB)</h1><p>Android Debug Bridge (adb) is a command-line tool that lets you communicate with an android device. The adb command facilitates a variety of device actions, such as installing and debugging apps, and it provides access to a Unix shell that you can use to run a variety of commands on a device.</p><h2 id="Phone-Setup"><a href="#Phone-Setup" class="headerlink" title="Phone Setup"></a>Phone Setup</h2><ol><li><p>Launch the Settings application on your phone.</p></li><li><p>Tap the About Phone option generally near the bottom of the list.</p></li><li><p>Then tap the Build Number option 7 times to enable Developer Mode. You will see a toast message when it is done.</p><p> <img src="Build-Number.png"></p></li><li><p>Now go to Settings -&gt; System -&gt; Developer Options (this is hidden behind the “Advanced” option).</p><p> <img src="Developer-option.png"></p></li><li><p>Go in there and enable the USB Debugging mode option.</p><p> <img src="Usb-debug.png"></p></li><li><p>You are partially done with the phone setup process. Next up, you will need to scroll below and follow the rest of the instructions for your particular operating system.</p></li></ol><h2 id="Windows-Setup"><a href="#Windows-Setup" class="headerlink" title="Windows Setup"></a>Windows Setup</h2><ol><li>Download the ADB ZIP file for Windows from <a href="https://dl.google.com/android/repository/platform-tools-latest-windows.zip">HERE</a>.</li><li>Extract the contents of this ZIP file into an easily accessible folder (such as C:\adb).</li><li>Open Windows explorer and browse to where you extracted the contents of this ZIP file.</li><li>Then open up a Command Prompt from the same directory as this ADB binary. This can be done by typing ‘cmd’ in the address bar and then hitting enter.</li></ol><p><img src="Command.png"></p><ol start="5"><li><p>Connect your smartphone or tablet to your computer with a USB cable. Change the USB mode to “file transfer (MTP)” mode. Some OEMs may or may not require this, but it’s best to just leave it in this mode for general compatibility.</p></li><li><p>In the Command Prompt window, enter the following command to launch the ADB daemon: <code>adb devices</code></p></li><li><p>On your phone’s screen, you should see a prompt to allow or deny USB Debugging access. Naturally, you will want to grant USB Debugging access when prompted (and tap the always allow check box if you never want to see that prompt again).</p><p> <img src="Usb-debug-2.png"></p></li><li><p>Finally, re-enter the command <code>adb devices</code>. If everything was successful, you should now see your device’s serial number in the command prompt. Yay! You can now run any ADB command on your device!</p></li></ol><h2 id="Linux-Setup"><a href="#Linux-Setup" class="headerlink" title="Linux Setup"></a>Linux Setup</h2><ol><li><p>Download the ADB ZIP file for Linux from <a href="https://dl.google.com/android/repository/platform-tools-latest-linux.zip">HERE</a></p></li><li><p>Extract the ZIP to an easily-accessible location (like the Desktop for example).</p></li><li><p>Open a Terminal window.</p></li><li><p>Enter the following command: <code>cd /path/to/extractedfolder/</code></p></li><li><p>This will change the directory to where you extracted the ADB files.</p></li><li><p>So for example:<code>cd /Users/Doug/Desktop/platform-tools/</code></p></li><li><p>Connect your device to your Linux machine with your USB cable. Change the connection mode to “file transfer (MTP)” mode. This is not always necessary for every device, but it’s recommended so you don’t run into any issues.</p></li><li><p>Once the Terminal is in the same folder your ADB tools are in, you can execute the following command to launch the ADB daemon: <code>adb devices</code></p></li><li><p>Back on your smartphone or tablet device, you’ll see a prompt asking you to allow USB debugging. Go ahead and grant it.</p><p>  <img src="Usb-debug-2.png"></p></li><li><p>Finally, re-enter the command from <code>adb devices</code>. If everything was successful, you should now see your device’s serial number in the Terminal window output. Congrats! You can now run any ADB command on your device!</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ADB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CyberYoddha CTF Writeup</title>
    <link href="/Blog/2020/11/03/CyberYoddha-CTF-Writeup/"/>
    <url>/Blog/2020/11/03/CyberYoddha-CTF-Writeup/</url>
    
    <content type="html"><![CDATA[<p>  I played this CTF as a solo player and i finished 84<sup>th</sup>/727 teams. It was great fun participating in this CTF. Let’s see how I solved some challenges.</p><h2 id="WELCOME"><a href="#WELCOME" class="headerlink" title="WELCOME"></a>WELCOME</h2><h3 id="Welcome"><a href="#Welcome" class="headerlink" title="Welcome"></a>Welcome</h3><p><img src="Welcome.png"></p><p>  Type “?flag” in the discord server, carlbot would DM you the flag.</p><blockquote><p> <strong>FLAG</strong>: CYCTF{W3lc0m3_t0_Cyb3rY0ddh@_CTF_2020!}</p></blockquote><h2 id="TRIVIA"><a href="#TRIVIA" class="headerlink" title="TRIVIA"></a>TRIVIA</h2><h3 id="Trivia-1"><a href="#Trivia-1" class="headerlink" title="Trivia 1"></a>Trivia 1</h3><p><img src="Trivia-1.png"></p><blockquote><p> <strong>FLAG</strong>: Linus Torvalds</p></blockquote><h3 id="Trivia-2"><a href="#Trivia-2" class="headerlink" title="Trivia 2"></a>Trivia 2</h3><p><img src="Trivia-2.png"></p><blockquote><p> <strong>FLAG</strong>:Gary Kildall</p></blockquote><h3 id="Trivia-3"><a href="#Trivia-3" class="headerlink" title="Trivia 3"></a>Trivia 3</h3><p><img src="Trivia-3.png"></p><blockquote><p> <strong>FLAG</strong>: Yahoo</p></blockquote><h3 id="Trivia-4"><a href="#Trivia-4" class="headerlink" title="Trivia 4"></a>Trivia 4</h3><p><img src="Trivia-4.png"></p><blockquote><p> <strong>FLAG</strong>: Honeypot</p></blockquote><h3 id="Trivia-5"><a href="#Trivia-5" class="headerlink" title="Trivia 5"></a>Trivia 5</h3><p><img src="Trivia-5.png"></p><blockquote><p> <strong>FLAG</strong>: Shoulder Surfing</p></blockquote><h3 id="Trivia-6"><a href="#Trivia-6" class="headerlink" title="Trivia 6"></a>Trivia 6</h3><p><img src="Trivia-6.png"></p><blockquote><p> <strong>FLAG</strong>: Logic Bomb</p></blockquote><h3 id="Trivia-7"><a href="#Trivia-7" class="headerlink" title="Trivia 7"></a>Trivia 7</h3><p><img src="Trivia-7.png"></p><blockquote><p> <strong>FLAG</strong>: System File Checker</p></blockquote><h3 id="Trivia-8"><a href="#Trivia-8" class="headerlink" title="Trivia 8"></a>Trivia 8</h3><p><img src="Trivia-8.png"></p><p>LOGO:</p><p><img src="Logo.png"></p><blockquote><p> <strong>FLAG</strong>: Haskell</p></blockquote><h2 id="SHEBANG"><a href="#SHEBANG" class="headerlink" title="SHEBANG"></a>SHEBANG</h2><h3 id="Shebang0"><a href="#Shebang0" class="headerlink" title="Shebang0"></a>Shebang0</h3><p><img src="Shebang-0-1.png"></p><p>  As the challenge description says we have to connect to the server via ssh for solving these challenges.</p><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell"><span class="hljs-number">1</span>. <span class="hljs-string">&quot;ssh shebang1@cyberyoddha.baycyber.net -p 1337&quot;</span><span class="hljs-string">&quot; with password shebang0.</span><br><span class="hljs-string">2. &quot;</span><span class="hljs-built_in">ls</span> <span class="hljs-literal">-al</span><span class="hljs-string">&quot; reveals flag.txt.</span><br><span class="hljs-string">3. &quot;</span><span class="hljs-built_in">cat</span> .flag.txt<span class="hljs-string">&quot; gives you the flag.</span><br></code></pre></div></td></tr></table></figure><p><img src="Shebang-0.png"></p><blockquote><p> <strong>FLAG</strong>: CYCTF{w3ll_1_gu3$$_b@sh_1s_e@zy}</p></blockquote><h3 id="Shebang1"><a href="#Shebang1" class="headerlink" title="Shebang1"></a>Shebang1</h3><figure class="highlight sqf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sqf"><span class="hljs-number">1</span>. <span class="hljs-string">&quot;ssh shebang1@cyberyoddha.baycyber.net -p 1337&quot;</span> <span class="hljs-keyword">with</span> password [previous <span class="hljs-built_in">Flag</span>].<br><span class="hljs-number">2</span>. <span class="hljs-string">&quot;ls&quot;</span> reveals <span class="hljs-built_in">flag</span>.txt, but cat <span class="hljs-built_in">flag</span>.txt shows a lot of garbage output.<br><span class="hljs-number">3</span>. <span class="hljs-string">&quot;cat flag.txt | grep &#x27;CYCTF&#x27;&quot;</span> gives you the <span class="hljs-built_in">flag</span>.<br></code></pre></div></td></tr></table></figure><p><img src="Shebang-1.png"></p><blockquote><p> <strong>FLAG</strong>: CYCTF{w3ll_1_gu3$$_y0u_kn0w_h0w_t0_gr3p}</p></blockquote><h3 id="Shebang2"><a href="#Shebang2" class="headerlink" title="Shebang2"></a>Shebang2</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs livecodeserver"><span class="hljs-number">1.</span> <span class="hljs-string">&quot;ssh shebang2@cyberyoddha.baycyber.net -p 1337&quot;</span> <span class="hljs-keyword">with</span> password [previous Flag].<br><span class="hljs-number">2.</span> <span class="hljs-string">&quot;ls&quot;</span> reveals <span class="hljs-keyword">a</span> ton <span class="hljs-keyword">of</span> <span class="hljs-built_in">files</span>.<br><span class="hljs-number">3.</span> <span class="hljs-string">&quot;grep &quot;</span>CYCTF<span class="hljs-string">&quot; -R &#123;&quot;</span> gets <span class="hljs-keyword">the</span> flag (grep <span class="hljs-keyword">with</span> -R does <span class="hljs-keyword">a</span> recursive search <span class="hljs-keyword">of</span> all <span class="hljs-built_in">files</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">directory</span>).<br></code></pre></div></td></tr></table></figure><p><img src="Shebang-2.png"></p><blockquote><p> <strong>FLAG</strong>: CYCTF{W0w_th@t$_@_l0t_0f_f1l3s}</p></blockquote><h3 id="Shebang3"><a href="#Shebang3" class="headerlink" title="Shebang3"></a>Shebang3</h3><figure class="highlight prolog"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs prolog"><span class="hljs-number">1.</span> <span class="hljs-string">&quot;ssh shebang3@cyberyoddha.baycyber.net -p 1337&quot;</span> with password [previous <span class="hljs-symbol">Flag</span>].<br><span class="hljs-number">2.</span> <span class="hljs-string">&quot;ls&quot;</span> and cat reveals <span class="hljs-number">2</span> large similar files...<br><span class="hljs-number">3.</span> <span class="hljs-string">&quot;diff file.txt file2.txt&quot;</span> reveals the <span class="hljs-symbol">FLAG</span>.<br></code></pre></div></td></tr></table></figure><p><img src="Shebang-3.png"></p><blockquote><p> <strong>FLAG</strong>: CYCTF{SPOT_TH3_D1FF}</p></blockquote><h3 id="Shebang4"><a href="#Shebang4" class="headerlink" title="Shebang4"></a>Shebang4</h3><figure class="highlight applescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs applescript"><span class="hljs-number">1.</span> <span class="hljs-string">&quot;ssh shebang3@cyberyoddha.baycyber.net -p 1337&quot;</span> <span class="hljs-keyword">with</span> password [previous Flag].<br><span class="hljs-number">2.</span> <span class="hljs-string">&quot;ls&quot;</span> reveals <span class="hljs-keyword">that</span> <span class="hljs-keyword">the</span> flag <span class="hljs-keyword">is</span> a png <span class="hljs-built_in">file</span>.<br><span class="hljs-number">3.</span> <span class="hljs-string">&quot;scp -P 1337 shebang4@cyberyoddha.baycyber.net:flag.png ./&quot;</span> allows you <span class="hljs-keyword">to</span> <span class="hljs-keyword">copy</span> <span class="hljs-built_in">file</span> <span class="hljs-keyword">over</span> ssh.<br><span class="hljs-number">4.</span> opening <span class="hljs-string">&quot;flag.png&quot;</span> reveals FLAG.<br></code></pre></div></td></tr></table></figure><blockquote><p> <strong>FLAG</strong>: CYCTF{W3ll_1_gu3$$_th@t_w@s_actually_easy}</p></blockquote><h2 id="WEB-EXPLOITATION"><a href="#WEB-EXPLOITATION" class="headerlink" title="WEB EXPLOITATION"></a>WEB EXPLOITATION</h2><h3 id="Look-Closely"><a href="#Look-Closely" class="headerlink" title="Look Closely"></a>Look Closely</h3><p><img src="Look-Closely.png"></p><p>  On opening the link we got:</p><p><img src="Look-Closely-Sol-1.png"></p><p>  On searching for “cyctf” on the source page i got the flag.</p><p><img src="Look-Closely-Sol-2.png"></p><blockquote><p> <strong>FLAG</strong>:  CYCTF{1nSp3t_eL3M3nt?}</p></blockquote><h3 id="Disallow"><a href="#Disallow" class="headerlink" title="Disallow"></a>Disallow</h3><p><img src="Disallow.png"></p><p>  On visiting link i was presented with this page:</p><p><img src="Disallow-Sol-1.png"></p><p>  So challenge name is Disallow so the first thought that comes to mind is to search for the robots.txt file. ( robots.txt file contain disallow feature)</p><p><img src="Disallow-Sol-2.png"></p><p>  Got the flag by opening the link found in robots.txt.</p><p><img src="Disallow-Sol-3.png"></p><blockquote><p> <strong>FLAG</strong>: CYCTF{d33r0b0t$_r_sUp3r10r}</p></blockquote><h3 id="Data-Store"><a href="#Data-Store" class="headerlink" title="Data Store"></a>Data Store</h3><p><img src="Data-Store.png"></p><p>  On Visiting the link we are presented with a Login Page.</p><p><img src="Data-Store-Sol-1.png"></p><p>  First thing i tried is default username and password like “Admin:Password” this didn’t work<br>  the second thing that came to my mind is SQL Injection so i started trying SQLi Payloads and<br>  the “admin ‘ OR 1 – -“ got me logged in.</p><p><img src="Data-Store-Sol-2.png"></p><p>  On the next page i got the flag.</p><p><img src="Data-Store-Sol-3.png"></p><blockquote><p> <strong>FLAG</strong>: CYCTF{1_l0v3_$q1i}</p></blockquote><h3 id="Something-Sw33t"><a href="#Something-Sw33t" class="headerlink" title="Something Sw33t"></a>Something Sw33t</h3><p><img src="Something-Sw33t.png"></p><p>  On visiting the link i got this page:</p><p><img src="Something-Sw33t-Sol-1.png"></p><p>  After checking the source code i found nothing. Then i looked at the cookies for this webpage and found a intresting cookie named “don’t look here”.</p><p><img src="Something-Sw33t-Sol-2.png"></p><p>  On inspecting the cookie i came to know that it is a flask cookie so i used a “flask-unsign” a tool which decodes the flask cookies. On decoding the cookie i found a bunch of base4 encoded strings.</p><p><img src="Something-Sw33t-Sol-3.png"></p><p>  On decoding these base64 encoded strings i got the flag.</p><p><img src="Something-Sw33t-Sol-4.png"></p><blockquote><p> <strong>FLAG</strong>:  CYCTF{0k_1_see_you_maybe_you_are_smart}</p></blockquote><h3 id="Data-Store-2"><a href="#Data-Store-2" class="headerlink" title="Data Store 2"></a>Data Store 2</h3><p><img src="Data-Store-2.png"></p><p>  On visiting the link i got the same login page as the Data Store challenge </p><p><img src="Data-Store-2-Sol-1.png"></p><p>  This time a file was provided on reading which i got to know that this the username field is sanitised and thus cannot be used for SQLi.</p><p><img src="Data-Store-2-Sol-2.png"></p><p>  Using the same payload used in previous challenge in the password field got me logged in.<br>  On the next page i got the flag.</p><p><img src="Data-Store-2-Sol-3.png"></p><blockquote><p> <strong>FLAG</strong>:  CYCTF{S@n1t1ze_@11_U$3R_1npu7$}</p></blockquote><h3 id="Data-Store-3"><a href="#Data-Store-3" class="headerlink" title="Data Store 3"></a>Data Store 3</h3><p><img src="Data-Store-3.png"></p><p>  On visiting the link i got a login page with a single password field </p><p><img src="Data-Store-3-Sol-1.png"></p><p>  Using the payload “‘=0–+” in the password field got me logged in.</p><p><img src="Data-Store-3-Sol-2.png"></p><p>  On the next page i got the Flag.</p><p><img src="Data-Store-3-Sol-3.png"></p><blockquote><p> <strong>FLAG</strong>:  CYCTF{D0n7_M@k3_D3bug_Publ1c}</p></blockquote><h2 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h2><h3 id="Beware-the-Idles-of-March"><a href="#Beware-the-Idles-of-March" class="headerlink" title="Beware the Idles of March"></a>Beware the Idles of March</h3><p><img src="Beware-Ides-of-March.png"></p><p>  It looks like a rotation cipher so put the string “JFJAM{j@3$@y_j!wo3y}” in <a href="https://gchq.github.io/CyberChef">cyberchef</a> and applied Rotation,on the rotation of 19 got the flag.</p><p><img src="Beware-Ides-of-March-Sol-1.png"></p><blockquote><p> <strong>FLAG</strong>: CYCTF{c@3$@r_c!ph3r}</p></blockquote><h3 id="Home-Base"><a href="#Home-Base" class="headerlink" title="Home Base"></a>Home Base</h3><p><img src="Home-Base.png"></p><p>  Put the string in cyberchef and converted it From Hex &gt; Base 32 &gt; Base 64 &gt; Base 85, and got the flag.</p><p><img src="Home-Base-Sol.png"></p><blockquote><p> <strong>FLAG</strong>: CYCTF{it5_@_H0m3_2un!}</p></blockquote><h3 id="Sus"><a href="#Sus" class="headerlink" title="Sus"></a>Sus</h3><p><img src="Sus.png"></p><p>  The Hint gives the idea that it can be vigenere cipher so i put the string “ooflgqofllcedopwvtnhyacwllhehdl” in cyberchef and used vigenere decoder and got the flag. Key is SALAD but you can just do auto decryption at <a href="https://www.dcode.fr/vigenere-cipher">dcode.fr</a> to get “wouldyoulikesomevinegarwiththat”.</p><p><img src="Sus-Sol.png"></p><blockquote><p> <strong>FLAG</strong>: CYCTF{wouldyoulikesomevinegarwiththat}</p></blockquote><h3 id="Rak-1"><a href="#Rak-1" class="headerlink" title="Rak 1"></a>Rak 1</h3><p><img src="Rak1.png"></p><p>  The Hint tells that it is an Advanced encryption, so in cyberchef i tried AES decode and got the flag.</p><ul><li>Cipher Text = “df 48 b8 6e 14 87 f6 8b a8 9c 2c c8 d3 2b ec 73 06 01 0a 01 e2 75 26 fe 38 d5 67 59 e6 55 33 b2 aa e0 2d 67 34 48 7d 52 8a 18 0d 36 d7 f2 18 8f” </li><li>Key = “B55D3CE3183E06928 BA82F8980B661A30A 6C4B2BA499062CF6A 31EB1CD581E55” </li><li>IV = “00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f”</li></ul><p><img src="Rak-1-Sol.png"></p><blockquote><p> <strong>FLAG</strong>: CYCTF{wh0_kn3w_yU0_w3r3_sO_sm@r7}</p></blockquote><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="Lorem-Ipsum"><a href="#Lorem-Ipsum" class="headerlink" title="Lorem Ipsum"></a>Lorem Ipsum</h3><p><img src="Lorem-Ipsum.png"></p><p>  I compared the given text with original Lorem ipsum text and found that there are some words which are extra in the given text. So After comparing the whole text i got cyctflatiniscool which is our flag.</p><blockquote><p> <strong>FLAG</strong>: cyctf{latiniscool}</p></blockquote><h2 id="FORENSICS"><a href="#FORENSICS" class="headerlink" title="FORENSICS"></a>FORENSICS</h2><h3 id="Image-Viewer"><a href="#Image-Viewer" class="headerlink" title="Image Viewer"></a>Image Viewer</h3><p><img src="Image-Viewer.png"></p><p>  Used Exiftool on the image and got the flag.<br><img src="Image-Viewer-Sol.png"></p><blockquote><p> <strong>FLAG</strong>: CYCTF{h3h3h3_1m@g3_M3t@d@t@_v13w3r_ICU}</p></blockquote><h3 id="The-row-beneath"><a href="#The-row-beneath" class="headerlink" title="The row beneath"></a>The row beneath</h3><p><img src="The-Row-Beneath.png"></p><figure class="highlight vim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vim">Used <span class="hljs-string">&quot;Strings plan.png | grep &quot;</span>CYCTF<span class="hljs-comment">&quot; and got the flag.</span><br></code></pre></div></td></tr></table></figure><p><img src="The-Row-Beneath-Sol.png"></p><blockquote><p> <strong>FLAG</strong>: CYCTF{L00k_1n_th3_h3x_13h54d56}</p></blockquote><h3 id="What’s-the-password"><a href="#What’s-the-password" class="headerlink" title="What’s the password?"></a>What’s the password?</h3><p><img src="What's-the-Password.png"></p><p>  Used “steghide extract -sf sudo.jpg” with “sudo” as password to get flag.</p><p><img src="What's-the-Password-Sol.png"></p><blockquote><p> <strong>FLAG</strong>: CYCTF{U$3_sud0_t0_achi3v3_y0ur_dr3@m$!}</p></blockquote><h3 id="Flag-delivery"><a href="#Flag-delivery" class="headerlink" title="Flag delivery"></a>Flag delivery</h3><p><img src="Flag-Delivery.png"></p><p>  Replaced characters with .  and - since it is morse code, used morse decoder and got the flag.</p><p><img src="Flag-Delivery-Sol.png"></p><blockquote><p> <strong>FLAG</strong>: CYCTF{R3@D_B3TW33N_TH3_L1N3S}</p></blockquote><h3 id="Flag-delivery-2"><a href="#Flag-delivery-2" class="headerlink" title="Flag delivery 2"></a>Flag delivery 2</h3><p><img src="Flag-Delivery-2.png"></p><p>  The challenge gave us a corrupted file and on opening it in the hex editor i got to know that it is a png file, so i fixed the wrong header and the data part.</p><p><img src="Flag-Delivery-2-Sol-1.png"><br><img src="Flag-Delivery-2-Sol-2.png"></p><p>  I got the flag after exporting the file from hex editor.</p><p><img src="Flag-Delivery-2-Sol-3.png"></p><blockquote><p> <strong>FLAG</strong>: CYCTF{Br0k3n_1m@g3s_@r3_@_p@1n_1n_th3_b@ck}</p></blockquote><h3 id="Steg-2"><a href="#Steg-2" class="headerlink" title="Steg 2"></a>Steg 2</h3><p><img src="Steg-2.png"></p><p>  I used stegsolve and changed the colour plane found the flag in Red Plane 1.</p><p><img src="Steg2-Sol.png"></p><blockquote><p> <strong>FLAG</strong>: CYCTF{l$b_st3g@n0gr@phy_f0r_th3_w1n}</p></blockquote><h3 id="Steg-Ultimate"><a href="#Steg-Ultimate" class="headerlink" title="Steg Ultimate"></a>Steg Ultimate</h3><p><img src="Steg-Ultimate.png"></p><p>  First i used steghide to extract a text file embedded in given image.</p><p><img src="Steg-Ultimate-Sol-1.png"></p><p>  The embedded file gave a link which gave us base64 encoded strings.</p><p><img src="Steg-Ultimate-Sol-2.png"></p><p>  When i converted the base64 encoded string to file with a online decoder i got the flag.</p><p><img src="Steg-Ultimate-Sol-3.png"></p><blockquote><p> <strong>FLAG</strong>: CYCTF{2_f0r_th3_pr1c3_0f_1_b64}</p></blockquote><h2 id="REVERSE-ENGINEERING"><a href="#REVERSE-ENGINEERING" class="headerlink" title="REVERSE ENGINEERING"></a>REVERSE ENGINEERING</h2><h3 id="Password-1"><a href="#Password-1" class="headerlink" title="Password 1"></a>Password 1</h3><p><img src="Password1.png"></p><p>   Challenge provides the following code:</p>  <figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">checkPassword</span>(<span class="hljs-params">password</span>):</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">len</span>(password) != <span class="hljs-number">43</span>):<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">if</span>(password[<span class="hljs-number">26</span>] == <span class="hljs-string">&#x27;r&#x27;</span> <span class="hljs-keyword">and</span> <br>      password[<span class="hljs-number">33</span>] == <span class="hljs-string">&#x27;t&#x27;</span> <span class="hljs-keyword">and</span> <br>      password[<span class="hljs-number">32</span>] == <span class="hljs-string">&#x27;3&#x27;</span> <span class="hljs-keyword">and</span> <br>      password[<span class="hljs-number">16</span>] == <span class="hljs-string">&#x27;3&#x27;</span> <span class="hljs-keyword">and</span> <br>      password[<span class="hljs-number">4</span>] == <span class="hljs-string">&#x27;F&#x27;</span> <span class="hljs-keyword">and</span> <br>      password[<span class="hljs-number">21</span>] == <span class="hljs-string">&#x27;r&#x27;</span> <span class="hljs-keyword">and</span> <br>      password[<span class="hljs-number">38</span>] == <span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-keyword">and</span> <br>      password[<span class="hljs-number">18</span>] == <span class="hljs-string">&#x27;c&#x27;</span> <span class="hljs-keyword">and</span> <br>      password[<span class="hljs-number">22</span>] == <span class="hljs-string">&#x27;@&#x27;</span> <span class="hljs-keyword">and</span> <br>      password[<span class="hljs-number">31</span>] == <span class="hljs-string">&#x27;g&#x27;</span> <span class="hljs-keyword">and</span> <br>      password[<span class="hljs-number">7</span>] == <span class="hljs-string">&#x27;u&#x27;</span> <span class="hljs-keyword">and</span> <br>      password[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;C&#x27;</span> <span class="hljs-keyword">and</span> <br>      password[<span class="hljs-number">6</span>] == <span class="hljs-string">&#x27;p&#x27;</span> <span class="hljs-keyword">and</span> <br>      password[<span class="hljs-number">39</span>] == <span class="hljs-string">&#x27;3&#x27;</span> <span class="hljs-keyword">and</span> <br>      password[<span class="hljs-number">3</span>] == <span class="hljs-string">&#x27;T&#x27;</span> <span class="hljs-keyword">and</span> <br>      password[<span class="hljs-number">25</span>] == <span class="hljs-string">&#x27;3&#x27;</span> <span class="hljs-keyword">and</span> <br>      password[<span class="hljs-number">29</span>] == <span class="hljs-string">&#x27;t&#x27;</span> <span class="hljs-keyword">and</span> <br>      password[<span class="hljs-number">42</span>] == <span class="hljs-string">&#x27;&#125;&#x27;</span> <span class="hljs-keyword">and</span> <br>      password[<span class="hljs-number">12</span>] == <span class="hljs-string">&#x27;g&#x27;</span> <span class="hljs-keyword">and</span> <br>      password[<span class="hljs-number">23</span>] == <span class="hljs-string">&#x27;c&#x27;</span> <span class="hljs-keyword">and</span> <br>      password[<span class="hljs-number">30</span>] == <span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">and</span> <br>      password[<span class="hljs-number">40</span>] == <span class="hljs-string">&#x27;3&#x27;</span> <span class="hljs-keyword">and</span> <br>      password[<span class="hljs-number">28</span>] == <span class="hljs-string">&#x27;_&#x27;</span> <span class="hljs-keyword">and</span> <br>      password[<span class="hljs-number">20</span>] == <span class="hljs-string">&#x27;@&#x27;</span> <span class="hljs-keyword">and</span> <br>      password[<span class="hljs-number">27</span>] == <span class="hljs-string">&#x27;$&#x27;</span> <span class="hljs-keyword">and</span> <br>      password[<span class="hljs-number">17</span>] == <span class="hljs-string">&#x27;_&#x27;</span> <span class="hljs-keyword">and</span> <br>      password[<span class="hljs-number">35</span>] == <span class="hljs-string">&#x27;3&#x27;</span> <span class="hljs-keyword">and</span> <br>      password[<span class="hljs-number">8</span>] == <span class="hljs-string">&#x27;7&#x27;</span> <span class="hljs-keyword">and</span> <br>      password[<span class="hljs-number">24</span>] == <span class="hljs-string">&#x27;t&#x27;</span> <span class="hljs-keyword">and</span> <br>      password[<span class="hljs-number">41</span>] == <span class="hljs-string">&#x27;7&#x27;</span> <span class="hljs-keyword">and</span> <br>      password[<span class="hljs-number">13</span>] == <span class="hljs-string">&#x27;_&#x27;</span> <span class="hljs-keyword">and</span> <br>      password[<span class="hljs-number">5</span>] == <span class="hljs-string">&#x27;&#123;&#x27;</span> <span class="hljs-keyword">and</span> <br>      password[<span class="hljs-number">2</span>] == <span class="hljs-string">&#x27;C&#x27;</span> <span class="hljs-keyword">and</span> <br>      password[<span class="hljs-number">11</span>] == <span class="hljs-string">&#x27;n&#x27;</span> <span class="hljs-keyword">and</span> <br>      password[<span class="hljs-number">9</span>] == <span class="hljs-string">&#x27;7&#x27;</span> <span class="hljs-keyword">and</span> <br>      password[<span class="hljs-number">15</span>] == <span class="hljs-string">&#x27;h&#x27;</span> <span class="hljs-keyword">and</span> <br>      password[<span class="hljs-number">34</span>] == <span class="hljs-string">&#x27;h&#x27;</span> <span class="hljs-keyword">and</span> <br>      password[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;Y&#x27;</span> <span class="hljs-keyword">and</span> <br>      password[<span class="hljs-number">10</span>] == <span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-keyword">and</span> <br>      password[<span class="hljs-number">37</span>] == <span class="hljs-string">&#x27;_&#x27;</span> <span class="hljs-keyword">and</span> <br>      password[<span class="hljs-number">14</span>] == <span class="hljs-string">&#x27;t&#x27;</span> <span class="hljs-keyword">and</span> <br>      password[<span class="hljs-number">36</span>] == <span class="hljs-string">&#x27;r&#x27;</span> <span class="hljs-keyword">and</span> <br>      password[<span class="hljs-number">19</span>] == <span class="hljs-string">&#x27;h&#x27;</span>):<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>password = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Enter password: &quot;</span>)<br><span class="hljs-keyword">if</span>(checkPassword(password)):<br>  print(<span class="hljs-string">&quot;PASSWORD ACCEPTED\n&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>  print(<span class="hljs-string">&quot;PASSWORD DENIED\n&quot;</span>)<br></code></pre></div></td></tr></table></figure><p>  I changed the code to the following code and got the flag.</p>  <figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">password=[<span class="hljs-string">&#x27;a&#x27;</span>]*<span class="hljs-number">43</span><br>password[<span class="hljs-number">26</span>] = <span class="hljs-string">&#x27;r&#x27;</span><br>password[<span class="hljs-number">33</span>] = <span class="hljs-string">&#x27;t&#x27;</span><br>password[<span class="hljs-number">32</span>] = <span class="hljs-string">&#x27;3&#x27;</span><br>password[<span class="hljs-number">16</span>] = <span class="hljs-string">&#x27;3&#x27;</span>  <br>password[<span class="hljs-number">4</span>] = <span class="hljs-string">&#x27;F&#x27;</span>  <br>password[<span class="hljs-number">21</span>] = <span class="hljs-string">&#x27;r&#x27;</span> <br>password[<span class="hljs-number">38</span>] = <span class="hljs-string">&#x27;1&#x27;</span>  <br>password[<span class="hljs-number">18</span>] = <span class="hljs-string">&#x27;c&#x27;</span>  <br>password[<span class="hljs-number">22</span>] = <span class="hljs-string">&#x27;@&#x27;</span>  <br>password[<span class="hljs-number">31</span>] = <span class="hljs-string">&#x27;g&#x27;</span>  <br>password[<span class="hljs-number">7</span>] = <span class="hljs-string">&#x27;u&#x27;</span>  <br>password[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;C&#x27;</span>  <br>password[<span class="hljs-number">6</span>] = <span class="hljs-string">&#x27;p&#x27;</span>  <br>password[<span class="hljs-number">39</span>] = <span class="hljs-string">&#x27;3&#x27;</span>  <br>password[<span class="hljs-number">3</span>] = <span class="hljs-string">&#x27;T&#x27;</span>  <br>password[<span class="hljs-number">25</span>] = <span class="hljs-string">&#x27;3&#x27;</span>  <br>password[<span class="hljs-number">29</span>] = <span class="hljs-string">&#x27;t&#x27;</span>  <br>password[<span class="hljs-number">42</span>] = <span class="hljs-string">&#x27;&#125;&#x27;</span>  <br>password[<span class="hljs-number">12</span>] = <span class="hljs-string">&#x27;g&#x27;</span>  <br>password[<span class="hljs-number">23</span>] = <span class="hljs-string">&#x27;c&#x27;</span>  <br>password[<span class="hljs-number">30</span>] = <span class="hljs-string">&#x27;0&#x27;</span>  <br>password[<span class="hljs-number">40</span>] = <span class="hljs-string">&#x27;3&#x27;</span>  <br>password[<span class="hljs-number">28</span>] = <span class="hljs-string">&#x27;_&#x27;</span>  <br>password[<span class="hljs-number">20</span>] = <span class="hljs-string">&#x27;@&#x27;</span>  <br>password[<span class="hljs-number">27</span>] = <span class="hljs-string">&#x27;$&#x27;</span>  <br>password[<span class="hljs-number">17</span>] = <span class="hljs-string">&#x27;_&#x27;</span>  <br>password[<span class="hljs-number">35</span>] = <span class="hljs-string">&#x27;3&#x27;</span>  <br>password[<span class="hljs-number">8</span>] = <span class="hljs-string">&#x27;7&#x27;</span>  <br>password[<span class="hljs-number">24</span>] = <span class="hljs-string">&#x27;t&#x27;</span>  <br>password[<span class="hljs-number">41</span>] = <span class="hljs-string">&#x27;7&#x27;</span>  <br>password[<span class="hljs-number">13</span>] = <span class="hljs-string">&#x27;_&#x27;</span>  <br>password[<span class="hljs-number">5</span>] = <span class="hljs-string">&#x27;&#123;&#x27;</span>  <br>password[<span class="hljs-number">2</span>] = <span class="hljs-string">&#x27;C&#x27;</span>  <br>password[<span class="hljs-number">11</span>] = <span class="hljs-string">&#x27;n&#x27;</span>  <br>password[<span class="hljs-number">9</span>] = <span class="hljs-string">&#x27;7&#x27;</span>  <br>password[<span class="hljs-number">15</span>] = <span class="hljs-string">&#x27;h&#x27;</span>  <br>password[<span class="hljs-number">34</span>] = <span class="hljs-string">&#x27;h&#x27;</span>  <br>password[<span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;Y&#x27;</span>  <br>password[<span class="hljs-number">10</span>] = <span class="hljs-string">&#x27;1&#x27;</span>  <br>password[<span class="hljs-number">37</span>] = <span class="hljs-string">&#x27;_&#x27;</span>  <br>password[<span class="hljs-number">14</span>] = <span class="hljs-string">&#x27;t&#x27;</span>  <br>password[<span class="hljs-number">36</span>] = <span class="hljs-string">&#x27;r&#x27;</span>  <br>password[<span class="hljs-number">19</span>] = <span class="hljs-string">&#x27;h&#x27;</span><br>print(password)<br><span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> password:<br>    print(char, end=<span class="hljs-string">&quot;&quot;</span>)<br></code></pre></div></td></tr></table></figure><p><img src="Password1-Sol-4.png"></p><blockquote><p> <strong>FLAG</strong>: CYCTF{pu771ng_th3_ch@r@ct3r$_t0g3th3r_1337}</p></blockquote><h3 id="Password-2"><a href="#Password-2" class="headerlink" title="Password 2"></a>Password 2</h3><p><img src="Password2.png"></p><p>  Challenge provides the following code:</p>  <figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">checkPassword</span>(<span class="hljs-params">password</span>):</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">len</span>(password) != <span class="hljs-number">47</span>):<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    newPass = <span class="hljs-built_in">list</span>(password)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">9</span>):<br>      newPass[i] = password[i]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>,<span class="hljs-number">24</span>):<br>      newPass[i] = password[<span class="hljs-number">32</span>-i]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">24</span>,<span class="hljs-number">47</span>,<span class="hljs-number">2</span>):<br>      newPass[i] = password[<span class="hljs-number">70</span>-i]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">45</span>,<span class="hljs-number">25</span>,-<span class="hljs-number">2</span>):<br>      newPass[i] = password[i]<br>    password = <span class="hljs-string">&quot;&quot;</span>.join(newPass);<br>    <span class="hljs-keyword">return</span> password == <span class="hljs-string">&quot;CYCTF&#123;ju$@rcs_3l771l_@_t&#125;bd3cfdr0y_u0t__03_0l3m&quot;</span><br><br>print(password)<br><span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> password:<br>    print(char,end=<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></div></td></tr></table></figure><p>  I changed the code to the following code and got the flag.</p>  <figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">password = <span class="hljs-string">&quot;CYCTF&#123;ju$@rcs_3l771l_@_t&#125;bd3cfdr0y_u0t__03_0l3m&quot;</span><br>newPass = <span class="hljs-built_in">list</span>(password)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">9</span>):<br>    newPass[i] = password[i]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>,<span class="hljs-number">24</span>):<br>    newPass[i] = password[<span class="hljs-number">32</span>-i]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">24</span>,<span class="hljs-number">47</span>,<span class="hljs-number">2</span>):<br>    newPass[i] = password[<span class="hljs-number">70</span>-i]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">45</span>,<span class="hljs-number">25</span>,-<span class="hljs-number">2</span>):<br>    newPass[i] = password[i]<br>print(newPass)<br><span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> newPass:<br>    print(char, end=<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></div></td></tr></table></figure><p><img src="Password2-Sol-3.png"></p><blockquote><p> <strong>FLAG</strong>: CYCTF{ju$t_@_l177l3_scr@mbl3_f0r_y0u_t0_d3c0d3}</p></blockquote><h2 id="PASSWORD-CRACKING"><a href="#PASSWORD-CRACKING" class="headerlink" title="PASSWORD CRACKING"></a>PASSWORD CRACKING</h2><h3 id="secure-I-think"><a href="#secure-I-think" class="headerlink" title="secure (I think?)"></a>secure (I think?)</h3><p>  I used crackstation on the given hash and got the flag.</p><p><img src="Secure-(I-think!).png"></p><blockquote><p> <strong>FLAG</strong>: securepassword</p></blockquote><h3 id="Crack-the-Zip"><a href="#Crack-the-Zip" class="headerlink" title="Crack the Zip!"></a>Crack the Zip!</h3><p>  Run “fcrackzip -Du -p /usr/share/wordlists/rockyou.txt flag.zip” on the given zip and i got the password for the zip, opened the zip and got the flag in the file inside the zip.</p><p><img src="Crack-the-Zip!.png"></p><blockquote><p> <strong>FLAG</strong>: cyctf{y0u_cr@ck3d_th3_z!p…}</p></blockquote><h3 id="supa-secure"><a href="#supa-secure" class="headerlink" title="supa secure"></a>supa secure</h3><p>  Run “hashcat -m 20 -a 0 -o cracked.txt hash.txt /usr/share/wordlists/rockyou.txt –force” with [given hash]:[given salt (cyctf)] in the hash.txt gets the flag.</p><p><img src="Supa-Secur3.png"></p><blockquote><p> <strong>FLAG</strong>: cyctf{ilovesalt}</p></blockquote><h3 id="Me-Myself-and-I"><a href="#Me-Myself-and-I" class="headerlink" title="Me, Myself, and I"></a>Me, Myself, and I</h3><p>  Used <a href="https://crackstation.net/">crackstation</a> on the given hash</p><p><img src="Me,Myself-and-I.png"></p><blockquote><p> <strong>FLAG</strong>: CYCTF{whoami}</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Hacking</category>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF Writeups</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
